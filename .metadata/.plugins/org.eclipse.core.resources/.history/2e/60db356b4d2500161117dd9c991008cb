package flow.token;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public abstract class Token {
	
	public static void main(String[] args) {
		String toTokenize;
		//toTokenize = "null 32.42\"hi\\\"\"false #hi";
		toTokenize = "null 32.43false";
		Token[] tokens = Token.tokenize(toTokenize);
		for (Token t: tokens) {
			System.out.println(t.getData());
		}
	}
	
	public abstract TokenType getType();
	public abstract String getData();
	private static String[] keyLiterals = new String[]{"null","false","true"};
	private static String numberChars = "0123456789.";
	
	private static Pattern numberEndPattern = Pattern.compile("^[1234567890\\.]+(.)"); 
	
	/**
	 * Tokenize a String. The logic is as follows:
	 * 
	 * <ol>
	 * 	<li></li>
	 * </ol>
	 * 
	 * @return array of Tokens
	 */
	public static Token[] tokenize(String s) {
		String data = new String(s);
		ArrayList<Token> tokens = new ArrayList<Token>();
		char first;
		while (data.length() > 0) {
			// Ignore whitespace
			data.replaceFirst("^\\s+","");
			// Ignore comments
			data.replaceFirst("^#.*(\n|$)","");
			// Scan for keyword literals
			for (String literal: keyLiterals) {
				if (data.startsWith(literal)) {
					tokens.add(new Literal(literal));
					removePrefix(data,literal);
					continue;
				}
			}
			// Scan for non-keyword literals: strings and numbers
			first = firstChar(data);
			// Scan for number literals
			if (numberChars.indexOf(first) != -1) {
				Matcher m = numberEndPattern.matcher(data);
				int end = data.indexOf(m.group(0));
				String matched = data.substring(0,end);
				tokens.addAll(new Literal(matched));
				removePrefix(data,matched);
				continue;
			}
			
		}
		return null;
	}
	
	private static char firstChar(String s) {
		return s.charAt(0);
	}
	
	private static void removePrefix(String s, String prefix) {
		s.replaceFirst("^"+prefix,"");
	}
}
